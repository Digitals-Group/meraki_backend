// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(uuid())
  read      Boolean  @default(false)
  write     Boolean  @default(false)
  update    Boolean  @default(false)
  delete    Boolean  @default(false)
  role      Role     @relation(fields: [role_id], references: [id], onUpdate: Cascade)
  role_id   String
  table_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String   @id @default(uuid())
  first_name   String?
  last_name    String?
  username     String   @unique
  phone_number String?  @unique
  password     String
  role         Role     @relation(fields: [role_id], references: [id], onUpdate: Cascade)
  role_id      String
  active       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Blog {
  id             String   @id @default(uuid())
  image          String
  title_uz       String   @unique
  title_ru       String   @unique
  title_en       String   @unique
  description_uz String
  description_ru String
  description_en String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Partner {
  id        String   @id @default(uuid())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Award {
  id             String   @id @default(uuid())
  title_uz       String   @unique
  title_ru       String   @unique
  title_en       String   @unique
  description_uz String
  description_ru String
  description_en String
  image          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id           String   @id @default(uuid())
  video        String
  image        String
  name_uz      String
  name_ru      String
  name_en      String
  company_name String
  position     String
  review_text  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contact {
  id           String    @id @default(uuid())
  name         String
  company_name String
  email        String    @unique
  phone_number String
  service      String
  description  String
  take_info    String
  is_Called    Boolean?  @default(false)
  services     Service[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Faq {
  id          String   @id @default(uuid())
  question_uz String
  question_ru String
  question_en String
  answer_uz   String
  answer_ru   String
  answer_en   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Career {
  id             String        @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  careers        CareerApply[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model CareerApply {
  id           String   @id @default(uuid())
  first_name   String
  last_name    String
  phone_number String
  email        String   @unique
  career       Career   @relation(fields: [career_id], references: [id], onUpdate: Cascade)
  career_id    String
  resume       String
  cover_letter String
  is_Called    Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//Article

model Article {
  id             String   @id @default(uuid())
  title_uz       String   @unique
  title_ru       String   @unique
  title_en       String   @unique
  description_uz String
  description_ru String
  description_en String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

///Project
model ProjectCategory {
  id        String    @id @default(uuid())
  title_uz  String
  title_ru  String
  title_en  String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProjectSolution {
  id              String   @id @default(uuid())
  title_uz        String
  title_ru        String
  title_en        String
  description_uz  String
  description_ru  String
  description_eng String
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProjectResult {
  id        String   @id @default(uuid())
  image     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                   String            @id @default(uuid())
  title_uz             String
  title_ru             String
  title_en             String
  image                String
  description_uz       String
  description_ru       String
  description_en       String
  resultDescription_uz String
  resultDescription_ru String
  resultDescription_en String
  projectCategoryId    String
  projectCategory      ProjectCategory   @relation(fields: [projectCategoryId], references: [id])
  projectSolutions     ProjectSolution[]
  projectResults       ProjectResult[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

/// Service
model ServiceCategory {
  id        String    @id @default(uuid())
  title_uz  String
  title_ru  String
  title_en  String
  image     String
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ServiceImage {
  id        String   @id @default(uuid())
  image     String
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceStep {
  id             String   @id @default(uuid())
  title_uz       String
  title_ru       String
  title_en       String
  description_uz String
  description_ru String
  description_en String
  serviceId      String
  service        Service  @relation(fields: [serviceId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Service {
  id                String          @id @default(uuid())
  title_uz          String
  title_ru          String
  title_en          String
  video             String
  serviceCategoryId String
  contactId         String
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  contact           Contact         @relation(fields: [contactId], references: [id])
  serviceImages     ServiceImage[]
  serviceSteps      ServiceStep[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Team{
  id               String @id @default(uuid())
  name_uz          String
  name_en          String
  name_ru          String
  image            String 
  jobPosition      String
  instagramLink    String?
  telegramLink     String?
  facebook         String?
}
